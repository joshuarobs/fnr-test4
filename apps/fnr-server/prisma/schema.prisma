// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://user:12345@localhost:5432/fnr_db"
}

/// Represents the base user model with common fields across all user types
model BaseUser {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String    // Hashed password
  firstName     String
  middleName    String?
  lastName      String
  phone         String?
  role          UserRole
  isActive      Boolean   @default(true)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isDeleted     Boolean   @default(false) @map("is_deleted")
  deletedAt     DateTime? @map("deleted_at")

  // One-to-one relations to specific user types
  staff         Staff?
  insured       Insured?
  supplier      Supplier?
  
  // Common relations
  handledClaims Claim[]   @relation("ClaimHandler")
  createdClaims Claim[]   @relation("ClaimCreator")
  comments      Comment[]
  recentlyViewedClaims RecentlyViewedClaim[] @relation("UserRecentViews")

  @@index([email])
  @@index([isDeleted])
  @@index([role, isActive])
  @@index([lastName, firstName]) // For name-based searches
}

enum UserRole {
  STAFF
  ADMIN
  SUPPLIER
  INSURED
}

/// Staff member specific information
model Staff {
  id            Int       @id @default(autoincrement())
  baseUserId    Int       @unique  // One-to-one with BaseUser
  baseUser      BaseUser  @relation(fields: [baseUserId], references: [id])
  department    String
  employeeId    String    @unique
  position      String
  permissions   String[]  // Array of permission strings
  isDeleted     Boolean   @default(false) @map("is_deleted")
  deletedAt     DateTime? @map("deleted_at")

  @@index([department])
  @@index([employeeId])
  @@index([isDeleted])
}

/// Insurance policy holder information
model Insured {
  id            Int       @id @default(autoincrement())
  baseUserId    Int       @unique  // One-to-one with BaseUser
  baseUser      BaseUser  @relation(fields: [baseUserId], references: [id])
  address       String
  claims        Claim[]
  isDeleted     Boolean   @default(false) @map("is_deleted")
  deletedAt     DateTime? @map("deleted_at")

  @@index([isDeleted])
}

/// Supplier/vendor information and ratings
model Supplier {
  id            Int       @id @default(autoincrement())
  baseUserId    Int       @unique  // One-to-one with BaseUser
  baseUser      BaseUser  @relation(fields: [baseUserId], references: [id])
  company       String
  serviceType   String[]  // Types of services provided
  areas         String[]  // Service areas
  ratings       Float?
  isDeleted     Boolean   @default(false) @map("is_deleted")
  deletedAt     DateTime? @map("deleted_at")

  @@index([company])
  @@index([ratings])
  @@index([isDeleted])
}

/// Insurance claim information and tracking
model Claim {
  id            Int         @id @default(autoincrement())
  claimNumber   String      @unique
  policyNumber  String      // Reference to external policy system
  insuredId     Int
  insured       Insured     @relation(fields: [insuredId], references: [id])
  handlerId     Int
  handler       BaseUser    @relation("ClaimHandler", fields: [handlerId], references: [id])
  creatorId     Int
  creator       BaseUser    @relation("ClaimCreator", fields: [creatorId], references: [id])
  status        ClaimStatus @default(DRAFT)
  incidentDate  DateTime
  description   String
  items         Item[]
  itemOrder     Int[]       @default([]) // Controls display order of items
  localItemIds  Int[]       @default([]) // Permanent local IDs for items
  comments      Comment[]
  totalClaimed  Float
  totalApproved Float?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  recentViews   RecentlyViewedClaim[] @relation("ClaimViews")
  isDeleted     Boolean     @default(false) @map("is_deleted")
  deletedAt     DateTime?   @map("deleted_at")

  // Progress tracking fields
  totalItems Int @default(0)
  insuredQuotesComplete Int @default(0)
  insuredProgressPercent Float @default(0)  // insuredQuotesComplete/totalItems * 100
  ourQuotesComplete Int @default(0)
  ourProgressPercent Float @default(0)  // ourQuotesComplete/totalItems * 100
  lastProgressUpdate DateTime?  // track when we last updated these counters

  @@index([claimNumber])
  @@index([policyNumber])
  @@index([status])
  @@index([insuredId])
  @@index([handlerId])
  @@index([createdAt])
  @@index([isDeleted])
  @@index([status, isDeleted])
  @@index([insuredId, status])
}

enum ClaimStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  PENDING_QUOTES
  APPROVED
  SETTLED
  REJECTED
}

enum RoomCategory {
  MASTER_BEDROOM
  BEDROOM_1
  BEDROOM_2
  KITCHEN_DINING
  LIVING_ROOM
  BATHROOM
  LAUNDRY
  OUTDOOR
  GARDEN
  GARAGE
  STORAGE
  BASEMENT
  OFFICE_STUDY
  OTHER
}

/// Claim item details and tracking
model Item {
  id                Int         @id @default(autoincrement())
  claimId           Int
  claim             Claim       @relation(fields: [claimId], references: [id])
  name              String
  category          String?
  roomCategory      RoomCategory?
  group             String?
  modelSerialNumber String?
  description       String?
  quantity          Int         @default(1)
  purchaseDate      DateTime?
  age               Int?
  condition         String?
  insuredsQuote     Float?
  ourQuote          Float?
  ourQuoteProof     String?
  itemStatus        ItemStatus  @default(NR)
  insuredsEvidence  Evidence[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  isDeleted         Boolean     @default(false) @map("is_deleted")
  deletedAt         DateTime?   @map("deleted_at")

  @@index([claimId])
  @@index([category])
  @@index([roomCategory])
  @@index([itemStatus])
  @@index([isDeleted])
  @@index([claimId, itemStatus])
}

enum ItemStatus {
  RS    @map("RS")     /// Replacement Same
  NR    @map("NR")     /// Not Replaced
  VPOL  @map("VPOL")   /// Void - Proof of Loss
  OTHER @map("OTHER")  /// Other Status
}

/// Evidence documentation for claims
model Evidence {
  id          Int           @id @default(autoincrement())
  itemId      Int
  item        Item          @relation(fields: [itemId], references: [id])
  type        EvidenceType
  url         String
  filename    String
  createdAt   DateTime      @default(now())
  isDeleted   Boolean       @default(false) @map("is_deleted")
  deletedAt   DateTime?     @map("deleted_at")

  @@index([itemId])
  @@index([type])
  @@index([isDeleted])
  @@index([itemId, type])
}

enum EvidenceType {
  PHOTO    @map("PHOTO")    /// Photographic evidence
  RECEIPT  @map("RECEIPT")  /// Purchase receipt
  MANUAL   @map("MANUAL")   /// Product manual
  WARRANTY @map("WARRANTY") /// Warranty documentation
  OTHER    @map("OTHER")    /// Other documentation
}

/// Comments and notes on claims
model Comment {
  id          Int       @id @default(autoincrement())
  claimId     Int
  claim       Claim     @relation(fields: [claimId], references: [id])
  userId      Int
  user        BaseUser  @relation(fields: [userId], references: [id])
  content     String
  isInternal  Boolean   @default(false)  // Internal notes vs customer-visible
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false) @map("is_deleted")
  deletedAt   DateTime? @map("deleted_at")

  @@index([claimId])
  @@index([userId])
  @@index([isDeleted])
  @@index([claimId, isInternal])
  @@index([createdAt])
}

/// Tracks recently viewed claims by users
model RecentlyViewedClaim {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      BaseUser @relation("UserRecentViews", fields: [userId], references: [id])
  claimId   Int
  claim     Claim    @relation("ClaimViews", fields: [claimId], references: [id])
  viewedAt  DateTime @default(now())
  isDeleted Boolean  @default(false) @map("is_deleted")
  deletedAt DateTime? @map("deleted_at")

  @@unique([userId, claimId])
  @@index([userId, viewedAt])
  @@index([isDeleted])
}
