name: Server Setup

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to setup (prod/staging)'
        required: true
        type: choice
        options:
          - staging
          - prod

env:
  NODE_VERSION: '20'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Install System Dependencies
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
          apt-get update
          apt-get upgrade -y
          apt-get install -y curl git build-essential nginx
          curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
          apt-get install -y nodejs
          npm install -g pm2
          apt-get install -y postgresql postgresql-contrib
          systemctl start postgresql nginx
          systemctl enable postgresql nginx
          ENDSSH

      - name: Configure Nginx
        run: |
          # First, copy our Nginx configuration file to the server
          scp nginx/fnr-app.conf root@${{ secrets.DROPLET_IP }}:/etc/nginx/sites-available/fnr-app

          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
          echo "üîß Configuring Nginx..."

          # Create symlink if it doesn't exist
          if [ ! -L /etc/nginx/sites-enabled/fnr-app ]; then
            ln -s /etc/nginx/sites-available/fnr-app /etc/nginx/sites-enabled/fnr-app
          fi

          # Remove default nginx site if it exists
          if [ -L /etc/nginx/sites-enabled/default ]; then
            rm /etc/nginx/sites-enabled/default
          fi

          # Test Nginx configuration
          nginx -t
          if [ $? -eq 0 ]; then
            echo "‚úÖ Nginx configuration test passed"
          else
            echo "‚ùå Nginx configuration test failed"
            exit 1
          fi

          # Restart Nginx
          systemctl restart nginx
          if [ $? -eq 0 ]; then
            echo "‚úÖ Nginx restarted successfully"
          else
            echo "‚ùå Failed to restart Nginx"
            exit 1
          fi
          ENDSSH

      - name: Configure PostgreSQL
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
          echo "üîç Checking PostgreSQL status..."
          if ! systemctl is-active --quiet postgresql; then
            echo "‚ùå PostgreSQL is not running!"
            systemctl status postgresql
            exit 1
          fi
          echo "‚úÖ PostgreSQL is running"

          echo "üìÅ Creating app directory if not exists..."
          mkdir -p /var/www/fnr-app

          echo "üë§ Setting up PostgreSQL users and database..."
          # First set postgres user password
          sudo -u postgres psql -c "ALTER USER postgres WITH PASSWORD '${{ secrets.DATABASE_PASSWORD }}';"

          # Now we can use postgres user with password authentication
          export PGPASSWORD="${{ secrets.DATABASE_PASSWORD }}"

          # Create application user and database
          psql -U postgres -h localhost << 'EOSQL'
          DO $$
          BEGIN
            IF NOT EXISTS (SELECT FROM pg_user WHERE usename = 'fnrapp') THEN
              CREATE USER fnrapp WITH PASSWORD '${{ secrets.DATABASE_PASSWORD }}';
            END IF;
          END
          $$;
          SELECT 'Creating database...' as step;
          DROP DATABASE IF EXISTS fnrdb;
          CREATE DATABASE fnrdb WITH OWNER fnrapp;
          GRANT ALL PRIVILEGES ON DATABASE fnrdb TO fnrapp;
          ALTER USER fnrapp WITH SUPERUSER;
          EOSQL

          echo "üîß Configuring PostgreSQL authentication..."
          PG_HBA_CONF=$(find /etc/postgresql -name "pg_hba.conf" | head -n 1)
          if [ -z "\$PG_HBA_CONF" ]; then
            echo "‚ùå Could not find pg_hba.conf"
            exit 1
          fi

          cp "\$PG_HBA_CONF" "\${PG_HBA_CONF}.bak"

          sed -i 's/peer/md5/g' "\$PG_HBA_CONF"
          sed -i 's/ident/md5/g' "\$PG_HBA_CONF"
          echo "# Added by setup workflow" >> "\$PG_HBA_CONF"
          echo "local   all      postgres                   md5" >> "\$PG_HBA_CONF"
          echo "local   fnrdb    fnrapp                     md5" >> "\$PG_HBA_CONF"
          echo "host    fnrdb    fnrapp      127.0.0.1/32   md5" >> "\$PG_HBA_CONF"

          echo "üîÑ Restarting PostgreSQL..."
          systemctl restart postgresql

          echo "üß™ Testing database connection..."
          export PGPASSWORD="${{ secrets.DATABASE_PASSWORD }}"
          if ! psql -U fnrapp -h localhost -d fnrdb -c "\conninfo"; then
            echo "‚ùå Database connection test failed"
            exit 1
          fi
          echo "‚úÖ Database connection test successful"
          ENDSSH

      - name: Setup Application Directory
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
          echo "üìÅ Setting up application directories..."
          for dir in "/var/www/fnr-app" "/var/www/fnr-app/logs" "/var/backups/app" "/var/backups/db"; do
            if ! mkdir -p "$dir"; then
              echo "‚ùå Failed to create directory: $dir"
              exit 1
            fi
            echo "‚úÖ Created directory: $dir"
          done

          echo "üîê Setting directory permissions..."
          if ! chown -R $USER:$USER /var/www/fnr-app; then
            echo "‚ùå Failed to set directory ownership"
            exit 1
          fi

          for dir in "/var/www/fnr-app" "/var/www/fnr-app/logs"; do
            if ! chmod 755 "$dir"; then
              echo "‚ùå Failed to set permissions for: $dir"
              exit 1
            fi
            echo "‚úÖ Set permissions for: $dir"
          done

          echo "üîç Verifying directory structure..."
          for dir in "/var/www/fnr-app" "/var/www/fnr-app/logs" "/var/backups/app" "/var/backups/db"; do
            if [ ! -d "$dir" ]; then
              echo "‚ùå Directory not found: $dir"
              exit 1
            fi

            perms=$(stat -c "%a" "$dir")
            if [ "$perms" != "755" ] && [ "$dir" = "/var/www/fnr-app" -o "$dir" = "/var/www/fnr-app/logs" ]; then
              echo "‚ùå Incorrect permissions on: $dir (found: $perms, expected: 755)"
              exit 1
            fi

            owner=$(stat -c "%U:%G" "$dir")
            if [ "$owner" != "$USER:$USER" ] && [ "$dir" = "/var/www/fnr-app" -o "$dir" = "/var/www/fnr-app/logs" ]; then
              echo "‚ùå Incorrect ownership on: $dir (found: $owner, expected: $USER:$USER)"
              exit 1
            fi
          done
          echo "‚úÖ Directory structure verified"
          ENDSSH

      - name: Configure Environment
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
          # Save database password for deploy workflow
          echo "${{ secrets.DATABASE_PASSWORD }}" > /var/www/fnr-app/.db_password
          chmod 600 /var/www/fnr-app/.db_password

          # Set NODE_ENV based on environment input
          if [ "${{ github.event.inputs.environment }}" = "prod" ]; then
            NODE_ENV="production"
          else
            NODE_ENV="staging"
          fi

          cat > /var/www/fnr-app/.env << EOF
          DATABASE_URL="postgresql://fnrapp:${{ secrets.DATABASE_PASSWORD }}@localhost:5432/fnrdb"
          NODE_ENV="$NODE_ENV"
          PORT=3000
          HOST="0.0.0.0"
          SESSION_SECRET="$(openssl rand -base64 32)"
          CLIENT_URL="http://${{ secrets.DROPLET_IP }}:3000"
          PM2_HOME="/var/www/fnr-app/.pm2"
          EOF
          chmod 600 /var/www/fnr-app/.env

          # Add NODE_ENV to bashrc for persistence across sessions (if not already present)
          grep -q "export NODE_ENV=\"$NODE_ENV\"" ~/.bashrc || echo "export NODE_ENV=\"$NODE_ENV\"" >> ~/.bashrc
          source ~/.bashrc

          # Also add to /etc/environment for system-wide availability
          echo "NODE_ENV=$NODE_ENV" | sudo tee -a /etc/environment
          source /etc/environment
          ENDSSH

      - name: Verify Setup
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
          echo "üîç Running comprehensive setup verification..."

          echo "üì¶ Verifying Node.js installation..."
          NODE_VERSION=$(node --version)
          if [ $? -ne 0 ]; then
            echo "‚ùå Node.js verification failed"
            exit 1
          fi
          echo "‚úÖ Node.js version: $NODE_VERSION"

          echo "üîÑ Verifying PM2 installation..."
          PM2_VERSION=$(pm2 --version)
          if [ $? -ne 0 ]; then
            echo "‚ùå PM2 verification failed"
            exit 1
          fi
          echo "‚úÖ PM2 version: $PM2_VERSION"

          echo "üêò Verifying PostgreSQL status..."
          if ! systemctl is-active --quiet postgresql; then
            echo "‚ùå PostgreSQL is not running"
            systemctl status postgresql
            exit 1
          fi
          echo "‚úÖ PostgreSQL is running"

          echo "üîê Testing database connection..."
          export PGPASSWORD="${{ secrets.DATABASE_PASSWORD }}"
          if ! psql -U fnrapp -h localhost -d fnrdb -c "\l" > /dev/null; then
            echo "‚ùå Database connection test failed"
            exit 1
          fi
          unset PGPASSWORD
          echo "‚úÖ Database connection successful"

          echo "üìÅ Verifying file structure..."
          REQUIRED_FILES=(
            "/var/www/fnr-app"
            "/var/www/fnr-app/logs"
            "/var/www/fnr-app/.env"
            "/var/www/fnr-app/.db_password"
          )

          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -e "$file" ]; then
              echo "‚ùå Required file/directory missing: $file"
              exit 1
            fi
            echo "‚úÖ Found: $file"
          done

          echo "üîí Verifying file permissions..."
          for file in "/var/www/fnr-app/.env" "/var/www/fnr-app/.db_password"; do
            if [ "$(stat -c %a $file)" != "600" ]; then
              echo "‚ùå Incorrect permissions on $file"
              exit 1
            fi
          done
          echo "‚úÖ File permissions verified"

          echo "üåç Verifying environment variables..."
          if ! grep -q "DATABASE_URL" /var/www/fnr-app/.env; then
            echo "‚ùå DATABASE_URL missing from .env"
            exit 1
          fi
          if ! grep -q "NODE_ENV" /var/www/fnr-app/.env; then
            echo "‚ùå NODE_ENV missing from .env"
            exit 1
          fi
          echo "‚úÖ Environment variables verified"

          echo "üåê Verifying Nginx status..."
          if ! systemctl is-active --quiet nginx; then
            echo "‚ùå Nginx is not running"
            systemctl status nginx
            exit 1
          fi
          echo "‚úÖ Nginx is running"

          echo "üîç Testing Nginx HTTP endpoint..."
          if ! curl -I http://localhost -s | grep -q "200 OK"; then
            echo "‚ùå Nginx HTTP endpoint test failed"
            exit 1
          fi
          echo "‚úÖ Nginx HTTP endpoint is accessible"

          echo "‚ú® Setup verification completed successfully"
          ENDSSH
