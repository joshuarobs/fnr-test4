name: Server Setup

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to setup (prod/staging)'
        required: true
        type: choice
        options:
          - prod
          - staging

env:
  NODE_VERSION: '20'

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Install System Dependencies
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            # Update system
            apt-get update
            apt-get upgrade -y

            # Install required packages
            apt-get install -y curl git build-essential

            # Install Node.js
            curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
            apt-get install -y nodejs

            # Install PM2
            npm install -g pm2

            # Install PostgreSQL
            apt-get install -y postgresql postgresql-contrib

            # Start PostgreSQL
            systemctl start postgresql
            systemctl enable postgresql
          ENDSSH

      - name: Configure PostgreSQL
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            echo "üîç Checking PostgreSQL status..."
            if ! systemctl is-active --quiet postgresql; then
              echo "‚ùå PostgreSQL is not running!"
              systemctl status postgresql
              exit 1
            fi
            echo "‚úÖ PostgreSQL is running"
            
            echo "üìÅ Creating app directory if not exists..."
            mkdir -p /var/www/fnr-app
            
            echo "üîë Generating database password..."
            DB_PASSWORD=$(openssl rand -base64 32)
            
            echo "üë§ Creating database user and database..."
            if ! sudo -u postgres psql -v ON_ERROR_STOP=1 << PSQL
            DO \$\$
            BEGIN
              IF NOT EXISTS (SELECT FROM pg_user WHERE usename = 'fnrapp') THEN
                CREATE USER fnrapp WITH PASSWORD '$DB_PASSWORD';
              END IF;
            END
            \$\$;
            CREATE DATABASE fnrdb;
            GRANT ALL PRIVILEGES ON DATABASE fnrdb TO fnrapp;
            ALTER USER fnrapp WITH SUPERUSER;
            \c fnrdb
            \dt
            PSQL
            then
              echo "‚ùå Failed to setup database user and permissions"
              exit 1
            fi
            echo "‚úÖ Database user and permissions configured"

            echo "üíæ Storing database password..."
            if ! echo "$DB_PASSWORD" > /var/www/fnr-app/.db_password; then
              echo "‚ùå Failed to store database password"
              exit 1
            fi
            chmod 600 /var/www/fnr-app/.db_password
            echo "‚úÖ Database password stored securely"

            echo "üîß Configuring PostgreSQL authentication..."
            PG_HBA_CONF=$(find /etc/postgresql -name "pg_hba.conf" | head -n 1)
            if [ -z "$PG_HBA_CONF" ]; then
              echo "‚ùå Could not find pg_hba.conf"
              exit 1
            fi
            
            # Backup original config
            cp "$PG_HBA_CONF" "${PG_HBA_CONF}.bak"
            
            # Update authentication methods
            sed -i "s/peer/md5/g" "$PG_HBA_CONF"
            sed -i "s/ident/md5/g" "$PG_HBA_CONF"
            
            # Add our specific rules
            echo "# Added by setup workflow" >> "$PG_HBA_CONF"
            echo "local   fnrdb    fnrapp                    md5" >> "$PG_HBA_CONF"
            echo "host    fnrdb    fnrapp    127.0.0.1/32   md5" >> "$PG_HBA_CONF"
            
            echo "üîÑ Restarting PostgreSQL..."
            systemctl restart postgresql
            if ! systemctl is-active --quiet postgresql; then
              echo "‚ùå PostgreSQL failed to restart"
              systemctl status postgresql
              # Restore backup if restart failed
              mv "${PG_HBA_CONF}.bak" "$PG_HBA_CONF"
              systemctl restart postgresql
              exit 1
            fi
            echo "‚úÖ PostgreSQL restarted successfully"

            echo "üß™ Testing database connection..."
            export PGPASSWORD="$DB_PASSWORD"
            if ! psql -U fnrapp -h localhost -d fnrdb -c "\conninfo"; then
              echo "‚ùå Database connection test failed"
              exit 1
            fi
            unset PGPASSWORD
            echo "‚úÖ Database connection test successful"
          ENDSSH

      - name: Setup Application Directory
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            echo "üìÅ Setting up application directories..."
            
            # Create directories with error checking
            for dir in "/var/www/fnr-app" "/var/www/fnr-app/logs" "/var/backups/app" "/var/backups/db"; do
              if ! mkdir -p "$dir"; then
                echo "‚ùå Failed to create directory: $dir"
                exit 1
              fi
              echo "‚úÖ Created directory: $dir"
            done

            echo "üîê Setting directory permissions..."
            if ! chown -R $USER:$USER /var/www/fnr-app; then
              echo "‚ùå Failed to set directory ownership"
              exit 1
            fi
            
            for dir in "/var/www/fnr-app" "/var/www/fnr-app/logs"; do
              if ! chmod 755 "$dir"; then
                echo "‚ùå Failed to set permissions for: $dir"
                exit 1
              fi
              echo "‚úÖ Set permissions for: $dir"
            done

            echo "üîç Verifying directory structure..."
            for dir in "/var/www/fnr-app" "/var/www/fnr-app/logs" "/var/backups/app" "/var/backups/db"; do
              if [ ! -d "$dir" ]; then
                echo "‚ùå Directory not found: $dir"
                exit 1
              fi
              
              # Check permissions
              perms=$(stat -c "%a" "$dir")
              if [ "$perms" != "755" ] && [ "$dir" = "/var/www/fnr-app" -o "$dir" = "/var/www/fnr-app/logs" ]; then
                echo "‚ùå Incorrect permissions on: $dir (found: $perms, expected: 755)"
                exit 1
              fi
              
              # Check ownership
              owner=$(stat -c "%U:%G" "$dir")
              if [ "$owner" != "$USER:$USER" ] && [ "$dir" = "/var/www/fnr-app" -o "$dir" = "/var/www/fnr-app/logs" ]; then
                echo "‚ùå Incorrect ownership on: $dir (found: $owner, expected: $USER:$USER)"
                exit 1
              fi
            done
            echo "‚úÖ Directory structure verified"
          ENDSSH

      - name: Configure Environment
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            # Create environment file with local database URL
            DB_PASSWORD=$(cat /var/www/fnr-app/.db_password)
            cat > /var/www/fnr-app/.env << EOF
            DATABASE_URL="postgresql://fnrapp:${DB_PASSWORD}@localhost:5432/fnrdb"
            NODE_ENV="${{ github.event.inputs.environment == 'prod' && 'production' || 'staging' }}"
            PORT=3000
            HOST="0.0.0.0"
            SESSION_SECRET="$(openssl rand -base64 32)"
            CLIENT_URL="http://${{ secrets.DROPLET_IP }}:3000"
            PM2_HOME="/var/www/fnr-app/.pm2"
            EOF

            # Set permissions
            chmod 600 /var/www/fnr-app/.env
          ENDSSH

      - name: Verify Setup
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            echo "üîç Running comprehensive setup verification..."
            
            echo "üì¶ Verifying Node.js installation..."
            NODE_VERSION=$(node --version)
            if [ $? -ne 0 ]; then
              echo "‚ùå Node.js verification failed"
              exit 1
            fi
            echo "‚úÖ Node.js version: $NODE_VERSION"

            echo "üîÑ Verifying PM2 installation..."
            PM2_VERSION=$(pm2 --version)
            if [ $? -ne 0 ]; then
              echo "‚ùå PM2 verification failed"
              exit 1
            fi
            echo "‚úÖ PM2 version: $PM2_VERSION"

            echo "üêò Verifying PostgreSQL status..."
            if ! systemctl is-active --quiet postgresql; then
              echo "‚ùå PostgreSQL is not running"
              systemctl status postgresql
              exit 1
            fi
            echo "‚úÖ PostgreSQL is running"

            echo "üîê Testing database connection..."
            DB_PASSWORD=$(cat /var/www/fnr-app/.db_password)
            export PGPASSWORD="$DB_PASSWORD"
            if ! psql -U fnrapp -h localhost -d fnrdb -c "\l" > /dev/null; then
              echo "‚ùå Database connection test failed"
              exit 1
            fi
            unset PGPASSWORD
            echo "‚úÖ Database connection successful"

            echo "üìÅ Verifying file structure..."
            REQUIRED_FILES=(
              "/var/www/fnr-app"
              "/var/www/fnr-app/logs"
              "/var/www/fnr-app/.env"
              "/var/www/fnr-app/.db_password"
            )

            for file in "${REQUIRED_FILES[@]}"; do
              if [ ! -e "$file" ]; then
                echo "‚ùå Required file/directory missing: $file"
                exit 1
              fi
              echo "‚úÖ Found: $file"
            done

            echo "üîí Verifying file permissions..."
            if [ "$(stat -c %a /var/www/fnr-app/.env)" != "600" ]; then
              echo "‚ùå Incorrect permissions on .env file"
              exit 1
            fi
            if [ "$(stat -c %a /var/www/fnr-app/.db_password)" != "600" ]; then
              echo "‚ùå Incorrect permissions on .db_password file"
              exit 1
            fi
            echo "‚úÖ File permissions verified"

            echo "üåç Verifying environment variables..."
            if ! grep -q "DATABASE_URL" /var/www/fnr-app/.env; then
              echo "‚ùå DATABASE_URL missing from .env"
              exit 1
            fi
            if ! grep -q "NODE_ENV" /var/www/fnr-app/.env; then
              echo "‚ùå NODE_ENV missing from .env"
              exit 1
            fi
            echo "‚úÖ Environment variables verified"

            echo "‚ú® Setup verification completed successfully"
          ENDSSH
