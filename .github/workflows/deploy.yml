name: Build and Deploy

on:
  push:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: |
          cd apps/fnr-server
          npx prisma generate
          cd ../..

      - name: Build application
        id: build
        run: |
          echo "🏗️ Building server application..."
          npx nx build fnr-server --skip-nx-cache

          # Verify build output
          if [ ! -d "dist/apps/fnr-server" ]; then
            echo "❌ Build output directory not found"
            exit 1
          fi

          echo "📦 Build output contents:"
          ls -la dist/apps/fnr-server/

          if [ ! -f "dist/apps/fnr-server/main.js" ]; then
            echo "❌ Main build artifact not found"
            exit 1
          fi

          echo "✅ Build completed successfully"

      - name: Run tests
        run: npx nx test fnr-server --skip-nx-cache

      - name: Prepare deployment package
        run: |
          DEPLOY_DIR="$GITHUB_WORKSPACE/.deploy"
          echo "🏗️ Creating deployment directory structure..."

          # Create directories with error checking
          mkdir -p "$DEPLOY_DIR/dist" || { echo "❌ Failed to create dist directory"; exit 1; }
          mkdir -p "$DEPLOY_DIR/prisma" || { echo "❌ Failed to create prisma directory"; exit 1; }

          echo "📂 Deployment directory structure created at: $DEPLOY_DIR"
          ls -la "$DEPLOY_DIR"

          echo "📦 Copying build output..."
          if [ ! -d "dist/apps/fnr-server" ]; then
            echo "❌ Build directory not found: dist/apps/fnr-server"
            exit 1
          fi
          cp -rv dist/apps/fnr-server/* "$DEPLOY_DIR/dist/" || { echo "❌ Failed to copy build output"; exit 1; }

          echo "📄 Copying Prisma files..."
          PRISMA_DIR="apps/fnr-server/prisma"
          if [ ! -d "$PRISMA_DIR" ]; then
            echo "❌ Prisma directory not found: $PRISMA_DIR"
            exit 1
          fi
          cp -v "$PRISMA_DIR/schema.prisma" "$DEPLOY_DIR/prisma/" || { echo "❌ Failed to copy schema.prisma"; exit 1; }
          cp -rv "$PRISMA_DIR/migrations" "$DEPLOY_DIR/prisma/" || { echo "❌ Failed to copy migrations"; exit 1; }
          cp -rv "$PRISMA_DIR/seedData" "$DEPLOY_DIR/prisma/" || { echo "❌ Failed to copy seedData"; exit 1; }

          echo "📝 Copying package files..."
          cp -v package.json "$DEPLOY_DIR/" || { echo "❌ Failed to copy package.json"; exit 1; }
          cp -v package-lock.json "$DEPLOY_DIR/" || { echo "❌ Failed to copy package-lock.json"; exit 1; }

          echo "✅ Verifying deployment package contents:"
          echo "Directory structure:"
          ls -R "$DEPLOY_DIR"

          echo "🔍 Checking critical files..."
          required_files=(
            "$DEPLOY_DIR/dist/main.js"
            "$DEPLOY_DIR/prisma/schema.prisma"
            "$DEPLOY_DIR/prisma/migrations"
            "$DEPLOY_DIR/prisma/seedData"
            "$DEPLOY_DIR/package.json"
            "$DEPLOY_DIR/package-lock.json"
          )

          for file in "${required_files[@]}"; do
            if [ ! -e "$file" ]; then
              echo "❌ Required file/directory missing: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done

          echo "📊 Directory sizes:"
          du -sh "$DEPLOY_DIR"/*

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: ${{ github.workspace }}/.deploy
          if-no-files-found: error
          retention-days: 1
          compression-level: 6
          overwrite: true

  deploy-staging:
    needs: build
    if: github.ref == 'refs/heads/staging' || github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest

    steps:
      - name: Download deployment package
        id: download-package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: ${{ github.workspace }}/.deploy

      - name: Verify deployment package
        run: |
          echo "🔍 Verifying downloaded package contents..."
          if [ ! -d "$GITHUB_WORKSPACE/.deploy" ]; then
            echo "❌ Deployment directory not found"
            exit 1
          fi

          echo "📋 Package contents:"
          ls -R $GITHUB_WORKSPACE/.deploy/

          echo "✅ Checking required files..."
          required_files=(
            "$GITHUB_WORKSPACE/.deploy/dist/main.js"
            "$GITHUB_WORKSPACE/.deploy/prisma/schema.prisma"
            "$GITHUB_WORKSPACE/.deploy/package.json"
          )

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file not found: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done

          echo "✅ Deployment package verification successful"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Backup Database
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_DIR="/var/backups/db"
            mkdir -p $BACKUP_DIR
            
            # Get database password from server
            DB_PASSWORD=$(cat /var/www/fnr-app/.db_password)
            export PGPASSWORD="$DB_PASSWORD"
            
            pg_dump -U fnrapp -h localhost fnrdb > $BACKUP_DIR/fnrdb_$TIMESTAMP.sql
            
            # Keep only last 5 backups
            ls -t $BACKUP_DIR/fnrdb_*.sql | tail -n +6 | xargs rm -f 2>/dev/null
            
            # Clear password from environment
            unset PGPASSWORD
          ENDSSH

      - name: Deploy Application
        run: |
          # Transfer files
          scp -r $GITHUB_WORKSPACE/.deploy/* root@${{ secrets.DROPLET_IP }}:/tmp/deploy/

          # Execute deployment
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            APP_DIR="/var/www/fnr-app"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_DIR="/var/backups/app"

            # Backup current deployment
            if [ -d "$APP_DIR" ] && [ "$(ls -A $APP_DIR)" ]; then
              mkdir -p $BACKUP_DIR
              tar -czf $BACKUP_DIR/app_backup_$TIMESTAMP.tar.gz -C $APP_DIR .
              ls -t $BACKUP_DIR/app_backup_*.tar.gz | tail -n +6 | xargs rm -f 2>/dev/null
            fi

            # Stop current application
            pm2 stop all 2>/dev/null || true

            # Deploy new build
            mkdir -p $APP_DIR
            rm -rf $APP_DIR/*
            cp -r /tmp/deploy/* $APP_DIR/

            # Install production dependencies only
            cd $APP_DIR
            npm ci --only=production

            # Generate Prisma client
            npx prisma generate

            # Setup directories
            mkdir -p logs
            chmod 755 logs
            chmod -R 755 prisma

            # Run database migrations
            DB_PASSWORD=$(cat .db_password)
            export DATABASE_URL="postgresql://fnrapp:${DB_PASSWORD}@localhost:5432/fnrdb"
            npx prisma migrate deploy --schema=./prisma/schema.prisma

            if [ $? -ne 0 ]; then
              echo "Migration failed. Rolling back to last backup..."
              LATEST_BACKUP=$(ls -t /var/backups/db/fnrdb_*.sql | head -n1)
              if [ -n "$LATEST_BACKUP" ]; then
                export PGPASSWORD="$DB_PASSWORD"
                psql -U fnrapp -h localhost -d fnrdb -f "$LATEST_BACKUP"
                unset PGPASSWORD
              fi
              exit 1
            fi

            # Start application
            pm2 delete all 2>/dev/null || true
            ENV="${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}"
            pm2 start dist/main.js \
              --name "fnr-server-$ENV" \
              --log $APP_DIR/logs/app.log \
              --error $APP_DIR/logs/error.log \
              --time \
              --merge-logs \
              --env production
            
            pm2 save
          ENDSSH

      - name: Verify Deployment
        run: |
          # Wait for application to start
          sleep 10

          # Check if service is running
          ssh root@${{ secrets.DROPLET_IP }} "pm2 list | grep fnr-server"

          # Verify database connection and run seed
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            cd /var/www/fnr-app
            DB_PASSWORD=$(cat .db_password)
            export DATABASE_URL="postgresql://fnrapp:${DB_PASSWORD}@localhost:5432/fnrdb"
            
            # Run seed
            npx prisma db seed
            
            if [ $? -ne 0 ]; then
              echo "Database seeding failed"
              exit 1
            fi
            echo "Database seeding completed successfully"
          ENDSSH

          # Verify HTTP endpoint
          echo "Verifying HTTP endpoint..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.DROPLET_IP }}:3000/api)
          if [ "$RESPONSE" = "200" ] || [ "$RESPONSE" = "301" ] || [ "$RESPONSE" = "302" ]; then
            echo "Deployment verified successfully"
          else
            echo "Deployment verification failed"
            exit 1
          fi

  deploy-production:
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest

    steps:
      - name: Download deployment package
        id: download-package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: ${{ github.workspace }}/.deploy

      - name: Verify deployment package
        run: |
          echo "🔍 Verifying downloaded package contents..."
          if [ ! -d "$GITHUB_WORKSPACE/.deploy" ]; then
            echo "❌ Deployment directory not found"
            exit 1
          fi

          echo "📋 Package contents:"
          ls -R $GITHUB_WORKSPACE/.deploy/

          echo "✅ Checking required files..."
          required_files=(
            "$GITHUB_WORKSPACE/.deploy/dist/main.js"
            "$GITHUB_WORKSPACE/.deploy/prisma/schema.prisma"
            "$GITHUB_WORKSPACE/.deploy/package.json"
          )

          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Required file not found: $file"
              exit 1
            fi
            echo "✅ Found: $file"
          done

          echo "✅ Deployment package verification successful"

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.DO_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DROPLET_IP }} >> ~/.ssh/known_hosts

      - name: Backup Database
        run: |
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_DIR="/var/backups/db"
            mkdir -p $BACKUP_DIR
            
            # Get database password from server
            DB_PASSWORD=$(cat /var/www/fnr-app/.db_password)
            export PGPASSWORD="$DB_PASSWORD"
            
            pg_dump -U fnrapp -h localhost fnrdb > $BACKUP_DIR/fnrdb_$TIMESTAMP.sql
            
            # Keep only last 5 backups
            ls -t $BACKUP_DIR/fnrdb_*.sql | tail -n +6 | xargs rm -f 2>/dev/null
            
            # Clear password from environment
            unset PGPASSWORD
          ENDSSH

      - name: Deploy Application
        run: |
          # Transfer files
          scp -r $GITHUB_WORKSPACE/.deploy/* root@${{ secrets.DROPLET_IP }}:/tmp/deploy/

          # Execute deployment
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            APP_DIR="/var/www/fnr-app"
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_DIR="/var/backups/app"

            # Backup current deployment
            if [ -d "$APP_DIR" ] && [ "$(ls -A $APP_DIR)" ]; then
              mkdir -p $BACKUP_DIR
              tar -czf $BACKUP_DIR/app_backup_$TIMESTAMP.tar.gz -C $APP_DIR .
              ls -t $BACKUP_DIR/app_backup_*.tar.gz | tail -n +6 | xargs rm -f 2>/dev/null
            fi

            # Stop current application
            pm2 stop all 2>/dev/null || true

            # Deploy new build
            mkdir -p $APP_DIR
            rm -rf $APP_DIR/*
            cp -r /tmp/deploy/* $APP_DIR/

            # Install production dependencies only
            cd $APP_DIR
            npm ci --only=production

            # Generate Prisma client
            npx prisma generate

            # Setup directories
            mkdir -p logs
            chmod 755 logs
            chmod -R 755 prisma

            # Run database migrations
            DB_PASSWORD=$(cat .db_password)
            export DATABASE_URL="postgresql://fnrapp:${DB_PASSWORD}@localhost:5432/fnrdb"
            npx prisma migrate deploy --schema=./prisma/schema.prisma

            if [ $? -ne 0 ]; then
              echo "Migration failed. Rolling back to last backup..."
              LATEST_BACKUP=$(ls -t /var/backups/db/fnrdb_*.sql | head -n1)
              if [ -n "$LATEST_BACKUP" ]; then
                export PGPASSWORD="$DB_PASSWORD"
                psql -U fnrapp -h localhost -d fnrdb -f "$LATEST_BACKUP"
                unset PGPASSWORD
              fi
              exit 1
            fi

            # Start application
            pm2 delete all 2>/dev/null || true
            ENV="${{ github.ref == 'refs/heads/main' && 'prod' || 'staging' }}"
            pm2 start dist/main.js \
              --name "fnr-server-$ENV" \
              --log $APP_DIR/logs/app.log \
              --error $APP_DIR/logs/error.log \
              --time \
              --merge-logs \
              --env production
            
            pm2 save
          ENDSSH

      - name: Verify Deployment
        run: |
          # Wait for application to start
          sleep 10

          # Check if service is running
          ssh root@${{ secrets.DROPLET_IP }} "pm2 list | grep fnr-server"

          # Verify database connection and run seed
          ssh root@${{ secrets.DROPLET_IP }} << 'ENDSSH'
            cd /var/www/fnr-app
            DB_PASSWORD=$(cat .db_password)
            export DATABASE_URL="postgresql://fnrapp:${DB_PASSWORD}@localhost:5432/fnrdb"
            
            # Run seed
            npx prisma db seed
            
            if [ $? -ne 0 ]; then
              echo "Database seeding failed"
              exit 1
            fi
            echo "Database seeding completed successfully"
          ENDSSH

          # Verify HTTP endpoint
          echo "Verifying HTTP endpoint..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.DROPLET_IP }}:3000/api)
          if [ "$RESPONSE" = "200" ] || [ "$RESPONSE" = "301" ] || [ "$RESPONSE" = "302" ]; then
            echo "Deployment verified successfully"
          else
            echo "Deployment verification failed"
            exit 1
          fi

      - name: Cleanup
        if: always()
        run: |
          rm -rf ~/.ssh/id_rsa
          rm -rf .deploy
          ssh root@${{ secrets.DROPLET_IP }} "rm -rf /tmp/deploy"
